@page "/editInventory/{InventoryId:int}"

@inject NavigationManager NavigationManager
@inject IUpdateInventoryUseCase UpdateInventoryUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase

<h2>Edit Inventory</h2>
<br />

<h3>Editing Inventory @InventoryId</h3>

<EditForm Model="inventory"
          OnValidSubmit="SaveInventory">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name" @bind-Value="inventory.InventoryName"
                   class="form-control">
        </InputText>
    </div>
    <br />

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="inventory.Quantity"
                     class="form-control">
        </InputNumber>
    </div>
    <br />

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="inventory.Price"
                     class="form-control">
        </InputNumber>
    </div>
    <br />

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code
{
    [Parameter]
    public int InventoryId { get; set; }

    private Inventory inventory = new();

    protected override async Task OnParametersSetAsync()
    {
        this.inventory = await ViewInventoryByIdUseCase.ExecuteAsync(this.InventoryId);
    }

    private async Task SaveInventory()
    {
        await UpdateInventoryUseCase.ExecuteAsync(this.inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
