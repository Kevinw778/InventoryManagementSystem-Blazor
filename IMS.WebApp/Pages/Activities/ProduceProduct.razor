@page "/produce"
@using static IMS.WebApp.Components.Common.AutoCompleteComponent

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IProduceProductUseCase ProduceProductUseCase

@inject IJSRuntime JSRuntime

<h3>Produce Product</h3>
<br />

<EditForm id="produce-form" Model="produceViewModel" OnValidSubmit="Produce">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Production #</label>
        <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
    </div>
    <br />

    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Produce"
                                       SearchFunction="SearchProduct"
                                       OnItemSelected="OnItemSelected">
                </AutoCompleteComponent>
                <input type="hidden" value="@produceViewModel.ProductId" />
            </div>
        </div>
    </div>
    <br />

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
    </div>
    <br />

    <button type="submit" class="btn btn-primary">Produce</button>
</EditForm>

@code
{
    private ProduceViewModel produceViewModel = new();
    private Product? selectedProduct = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        JSRuntime.InvokeVoidAsync("preventFormSubmission", "produce-form");
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string searchTerms)
    {
        var results = await ViewProductsByNameUseCase.ExecuteAsync(searchTerms);
        if (results == null)
        {
            return null;
        }

        return results.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedProduct = (await ViewProductByIdUseCase.ExecuteAsync(item.Id));

        this.produceViewModel.ProductId = item.Id;
        this.produceViewModel.Product = selectedProduct;
    }

    private async Task Produce()
    {
        if (selectedProduct != null)
        {
            await ProduceProductUseCase.ExecuteAsync(
                this.produceViewModel.ProductionNumber,
                this.selectedProduct,
                this.produceViewModel.QuantityToProduce,
                "Kevin"
            );
        }

        this.produceViewModel = new();
        this.selectedProduct = null;
    }
}
