@page "/sell"
@using static IMS.WebApp.Components.Common.AutoCompleteComponent

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@inject IJSRuntime JSRuntime

<h3>Sell Product</h3>
<br />

<EditForm id="sell-form" Model="sellViewModel" OnValidSubmit="Sell">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Sales Order #</label>
        <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
    </div>
    <br />

    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Sell"
                                       SearchFunction="SearchProduct"
                                       OnItemSelected="OnItemSelected">
                </AutoCompleteComponent>
                <input type="hidden" value="@sellViewModel.ProductId" />
            </div>
        </div>
    </div>
    <br />

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
    </div>
    <br />

    <div class="form-group">
        <label for="price">Unit Price</label>
        <InputNumber id="price" @bind-Value="sellViewModel.UnitPrice" class="form-control"></InputNumber>
    </div>
    <br />

    @if (CalculateTotalSalePrice() > 0)
    {
        <text>Total Sell Price: </text>
        @CalculateTotalSalePrice().ToString("c")
        <br />

        <br />
    }

    <button type="submit" class="btn btn-primary">Sell</button>
</EditForm>

@code
{
    private SellViewModel sellViewModel = new();

    private Product? selectedProduct = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "sell-form");
        }
    }

    private async Task Sell()
    {
        await SellProductUseCase.ExecuteAsync(
            this.sellViewModel.SalesOrderNumber,
            this.sellViewModel.Product,
            this.sellViewModel.QuantityToSell,
            this.sellViewModel.UnitPrice,
            "Kevin"
        );

        this.sellViewModel = new();
        this.selectedProduct = null;
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string searchTerms)
    {
        var results = await ViewProductsByNameUseCase.ExecuteAsync(searchTerms);
        if (results == null)
        {
            return null;
        }

        return results.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        this.sellViewModel.ProductId = item.Id;
        this.sellViewModel.Product = this.selectedProduct;
        this.sellViewModel.UnitPrice = this.selectedProduct.Price;
    }

    private double CalculateTotalSalePrice()
    {
        return 0.0;
    }
}
