@page "/purchase"
@using static IMS.WebApp.Components.Common.AutoCompleteComponent

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase

<h3>PurchaseInventory</h3>
<br />

<EditForm Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Purchase Order #</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
    </div>
    <br />

    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Inventory to Purchase"
                                       SearchFunction="SearchInventory"
                                       OnItemSelected="OnItemSelected">
                </AutoCompleteComponent>
                <input type="hidden" value="@purchaseViewModel.InventoryId" />

                @if (purchaseViewModel.InventoryId > 0 && purchaseViewModel.InventoryPrice >= 0)
                {
                    <text>Price:</text>
                    @purchaseViewModel.InventoryPrice.ToString("c")
                    ;
                }
            </div>
        </div>
    </div>
    <br />

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>
    <br />

    <button type="submit" class="btn btn-primary">Purchase</button>
</EditForm>

@code
{
    private PurchaseViewModel purchaseViewModel = new();

    private Inventory? selectedInventory = null;

    private async Task Purchase()
    {
        await PurchaseInventoryUseCase.ExecuteAsync(
            this.purchaseViewModel.PONumber,
            this.selectedInventory,
            this.purchaseViewModel.QuantityToPurchase,
            "Kevin"
        );

        this.purchaseViewModel = new();
        this.selectedInventory = null;
    }

    private List<ItemViewModel>? SearchInventory(string searchTerms)
    {
        var results = ViewInventoriesByNameUseCase.ExecuteAsync(searchTerms).GetAwaiter().GetResult();
        if (results == null)
        {
            return null;
        }

        return results.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedInventory = (await ViewInventoryByIdUseCase.ExecuteAsync(item.Id));

        this.purchaseViewModel.InventoryId = item.Id;
        this.purchaseViewModel.InventoryPrice = selectedInventory.Price;
    }
}
